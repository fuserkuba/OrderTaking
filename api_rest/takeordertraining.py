# -*- coding: utf-8 -*-
"""TakeOrderTraining.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EFITH9h8DQYiqZFuELu3IkVGIUCZOMqQ

LOADING DATA
"""

import pandas as pd
import numpy as np
from IPython.display import display

filename = "https://raw.githubusercontent.com/fuserkuba/OrderTaking/master/training/orders.csv"

df = pd.read_csv(filename, na_values=[""])

print("{} rows loaded! \n".format(df.shape[0]))

df.info()

"""# TRAINING"""

features = ['to_user_distance','to_user_elevation','total_earning']
target = ['taken']

X = df[features].values
y = df[target].values.ravel()

display(X[:5],X.shape)
display(y[:5],y.shape)

"""## PREPARE TRAIN AND TEST DATA"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y)

print("Training set X: {}  y: {}".format(X_train.shape,y_train.shape))
print("Test set X: {}  y: {}".format(X_test.shape,y_test.shape))

from sklearn.preprocessing import StandardScaler
#
from sklearn.pipeline import Pipeline
#
from sklearn.neighbors import KNeighborsClassifier

classifier = KNeighborsClassifier(n_neighbors=3)

steps = [('scaler', StandardScaler()),
         ('clf', classifier)]

pipeline = Pipeline(steps)

parameters = {'clf__n_neighbors': (3,5,10)}

display(parameters)

"""## TRAINING WITH CROSS VALIDATION"""

from sklearn.model_selection import GridSearchCV
from pprint import pprint
from time import time

grid_search = GridSearchCV(pipeline, parameters, n_jobs=-1, verbose=1)

print("Performing grid search...")
print("pipeline:", [name for name, _ in pipeline.steps])
print("parameters:")
pprint(parameters)
t0 = time()
grid_search.fit(X_train, y_train)
print("Done in %0.3fs" % (time() - t0))
print()
print("Best score: %0.3f" % grid_search.best_score_)
print("Best parameters set:")
best_parameters = grid_search.best_estimator_.get_params()
for param_name in sorted(parameters.keys()):
  print("\t%s: %r" % (param_name, best_parameters[param_name]))

model=grid_search.best_estimator_

print("\nBEST MODEL :")
display(model)

"""# TEST MODEL"""

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score


y_pred = model.predict(X_test)
print("confusion matrix:")
display(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))
print("Accuracy: {}".format(accuracy_score(y_test, y_pred)))

type(X_train)

"""# SAVE MODEL"""

import joblib

filename='model.joblib'

joblib.dump(model, filename)